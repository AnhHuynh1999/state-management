import { createAction, createSlice } from "@reduxjs/toolkit";
import { IBlog } from "../../type/backend";

export interface BlogState {
  isPending: boolean;
  isError: boolean;
  data: IBlog[];
  errors: any;

  isCreating: boolean;
  isCreateSuccess: boolean;

  isUpdating: boolean;
  isUpdateSuccess: boolean;

  isDeleting: boolean;
  isDeleteSuccess: boolean;
}

const initialState: BlogState = {
  isPending: false,
  isError: false,
  isCreating: false,
  isCreateSuccess: false,

  isUpdating: false,
  isUpdateSuccess: false,

  isDeleting: false,
  isDeleteSuccess: false,

  data: [],
  errors: [],
};

export const fetchBlogPending = createAction("fetchBlogPending");
export const fetchBlogSuccess = createAction<IBlog[]>("fetchBlogSuccess");
export const fetchBlogFailed = createAction("fetchBlogFailed");

export const createBlogPending = createAction<{
  title: string;
  author: string;
  content: string;
}>("createBlogPending");
export const createBlogSuccess = createAction("createBlogSuccess");
export const createBlogFailed = createAction("createBlogFailed");

export const deleteBlogPending = createAction<{ id: number }>(
  "deleteBlogPending"
);
export const deleteBlogSuccess = createAction("deleteBlogSuccess");
export const deleteBlogFailed = createAction("deleteBlogFailed");

export const updateBlogPending = createAction<{
  id: number;
  title: string;
  author: string;
  content: string;
}>("updateBlogPending");
export const updateBlogSuccess = createAction("updateBlogSuccess");
export const updateBlogFailed = createAction("updateBlogFailed");

// Define the slice
export const BlogSlice = createSlice({
  name: "blog",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // Add more reducers here...
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchBlogPending, (state, action) => {
        state.isPending = true;
        state.isError = false;
      })
      .addCase(fetchBlogSuccess, (state, action) => {
        state.isPending = false;
        state.isError = false;
        state.data = action.payload;
      })
      .addCase(fetchBlogFailed, (state, action) => {
        state.isPending = false;
        state.isError = true;
        state.errors = action.payload;
      })
      .addCase(createBlogPending, (state, action) => {
        state.isCreating = true;
        state.isError = false;
        state.isCreateSuccess = false;
      })
      .addCase(createBlogSuccess, (state, action) => {
        state.isCreating = false;
        state.isCreateSuccess = true;
        state.isError = false;
      })
      .addCase(createBlogFailed, (state, action) => {
        state.isCreating = false;
        state.isCreateSuccess = false;
        state.isError = true;
        state.errors = action.payload;
      })
      .addCase(updateBlogPending, (state, action) => {
        state.isUpdating = true;
        state.isError = false;
        state.isUpdateSuccess = false;
      })
      .addCase(updateBlogSuccess, (state, action) => {
        state.isUpdating = false;
        state.isUpdateSuccess = true;
        state.isError = false;
      })
      .addCase(updateBlogFailed, (state, action) => {
        state.isUpdating = false;
        state.isUpdateSuccess = false;
        state.isError = true;
        state.errors = action.payload;
      })
      .addCase(deleteBlogPending, (state, action) => {
        state.isDeleting = true;
        state.isError = false;
        state.isDeleteSuccess = false;
      })
      .addCase(deleteBlogSuccess, (state, action) => {
        state.isDeleting = false;
        state.isDeleteSuccess = true;
        state.isError = false;
      })
      .addCase(deleteBlogFailed, (state, action) => {
        state.isDeleting = false;
        state.isDeleteSuccess = false;
        state.isError = true;
        state.errors = action.payload;
      });
  },
});

export const {} = BlogSlice.actions;

export default BlogSlice.reducer;
